/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.legacy;

import externos.newTabbleModelCNPJ;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;
import model.empresa;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;
import view.mainFrame;

/**
 *
 * @author Victor
 */
public class consultaEmpresasPanel extends javax.swing.JPanel {

    DefaultTableModel tableModel;
    DefaultTableModel model;
    ArrayList<empresa> empresas;
    private javax.swing.JButton buttonConsultar;
    private javax.swing.JButton buttonData;
    private javax.swing.JButton buttonNome;
    private javax.swing.JButton buttonCadastro;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private JButton buttonExportar;
    private JLabel jLabel1;
    private String descricao;
    private JButton buttonCNPJ;

    /**
     * Creates new form NewJPanel
     */
    public consultaEmpresasPanel() {
        initComponents();
        empresas = new ArrayList<>();
        buttonNome.setVisible(false);
        buttonData.setVisible(false);
        buttonCNPJ.setVisible(false);
        //        jTable2.setVisible(false);
        jScrollPane2.setVisible(false);
        buttonExportar.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {
        buttonExportar = new JButton("Exportar");
        buttonCadastro = new JButton();
        buttonNome = new JButton();
        buttonConsultar = new JButton();
        buttonData = new JButton();
        jScrollPane2 = new JScrollPane();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        buttonCNPJ = new JButton();

        setMaximumSize(new Dimension(1200, 900));
        setMinimumSize(new Dimension(1200, 900));
        setPreferredSize(new Dimension(1200, 900));
        setLayout(new AbsoluteLayout());

        buttonExportar.addActionListener((ActionEvent e) -> {
            Component teste = SwingUtilities.getWindowAncestor(buttonCadastro);
            mainFrame a = (mainFrame) teste;
            ArrayList<String> colunas = new ArrayList<>();
            colunas.add("Código");
            colunas.add("Nome");
            colunas.add("CNPJ");
            colunas.add("Data");
            try {
                ArrayList<Object> objetos = new ArrayList<>();
                Iterator asd = empresas.iterator();
                while (asd.hasNext()) {
                    objetos.add(asd.next());
                }
                a.exportarDados(colunas, objetos);
            } catch (IOException ex) {
                Logger.getLogger(consultaAreaPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        add(buttonExportar, new AbsoluteConstraints(1000, 500, 170, 70));

        buttonCadastro.setText("Cadastrar Nova Empresa");
        buttonCadastro.addActionListener((java.awt.event.ActionEvent evt) -> {
            try {
                jButton1ActionPerformed(evt);
            } catch (SQLException | ParseException ex) {
                Logger.getLogger(consultaEmpresasPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        add(buttonCadastro, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 200, 200, 70));

        buttonNome.setText("por Nome");
        buttonNome.addActionListener((java.awt.event.ActionEvent evt) -> {
            descricaoActionPerformed(evt);
        });
        add(buttonNome, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 200, 140, 70));

        buttonConsultar.setText("Consultar Empresa");
        buttonConsultar.addActionListener((java.awt.event.ActionEvent evt) -> {
            consultarActionPerformed(evt);
        });
        add(buttonConsultar, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 200, 170, 70));

        buttonData.setText("por Data");
        buttonData.addActionListener((java.awt.event.ActionEvent evt) -> {
            try {
                dataActionPerformed(evt);
            } catch (ParseException ex) {
                Logger.getLogger(consultaEmpresasPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        add(buttonData, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 130, 140, 70));
        buttonCNPJ.setText("por CNPJ");
        buttonCNPJ.addActionListener((java.awt.event.ActionEvent evt) -> {
            try {
                buttonCNPJActionPerformed(evt);
            } catch (ParseException ex) {
                Logger.getLogger(consultaEmpresasPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        add(buttonCNPJ, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 270, 140, 70));

        jTable2 = new JTable(model);
        jScrollPane2.setViewportView(jTable2);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(232, 360, 740, -1));

        jButton2.setText("VOLTAR");
        jButton2.addActionListener((java.awt.event.ActionEvent evt) -> {
            try {
                jButton2ActionPerformed(evt);
            } catch (ParseException ex) {
                Logger.getLogger(consultaEmpresasPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 110, -1, -1));

        jButton3.setText("Atualizar Dados");
        jButton3.addActionListener((java.awt.event.ActionEvent evt) -> {
            try {
                jButton3ActionPerformed(evt);
            } catch (ParseException ex) {
                Logger.getLogger(consultaAreaPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 330, -1, -1));
        jButton3.setVisible(false);
        jLabel1 = new JLabel();
        jLabel1.setFont(new Font("Tahoma", 0, 24));
        jLabel1.setText("CADASTRO DE EMPRESA");
        jLabel1.setVisible(true);
        add(jLabel1, new AbsoluteConstraints(490, 100));
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) throws SQLException, ParseException {
        MaskFormatter msk = new MaskFormatter("##.###.###/####-##");
        JTextField nome = new JTextField();
        JFormattedTextField codigo = new JFormattedTextField(msk);
        Object[] message = {
            "Nome da Empresa:", nome,
            "Código CNPJ:", codigo
        };
        while (true) {
            try {
                int option = JOptionPane.showConfirmDialog(null, message, "Cadastro de Nova Empresa", JOptionPane.OK_CANCEL_OPTION);
                if (option == JOptionPane.OK_OPTION) {
                    if (nome.getText().equals("") || codigo.getText().equals("  .   .   /    -  ")) {
                        JOptionPane.showMessageDialog(null,
                                "Favor informar nome e/ou CNPJ válidos."); //colocar feedback separado?
                    } else {
                        Component teste = SwingUtilities.getWindowAncestor(buttonCadastro);
                        mainFrame a = (mainFrame) teste;
                        a.cadastroEmpresa(nome.getText(), codigo.getText());
                        break;
                    }
                    //tratamento
                } else {
                    break;
                }
            } catch (NullPointerException e) {
                break;
            }
        }

    }

    private void descricaoActionPerformed(java.awt.event.ActionEvent evt) {
        String nome;
        empresas.clear();
        while (true) {
            try {
                nome = JOptionPane.showInputDialog(null, "Informe o nome a ser consultado:", "Consulta de Empresa", JOptionPane.PLAIN_MESSAGE);
                if (nome.equals("null") || nome.equals("")) {
                    JOptionPane.showMessageDialog(null,
                            "Favor informar um nome.");
                } else {
                    Component teste = SwingUtilities.getWindowAncestor(buttonCadastro);
                    mainFrame a = (mainFrame) teste;
                    try {
                        empresa retorno = a.consultaEmpresa(nome);
                        if (retorno != null) {
                            empresas.add(a.consultaEmpresa(nome));
                        }
                        jScrollPane2.setVisible(true);
                        jTable2.setVisible(true);
                        jButton3.setVisible(true);
                        buttonExportar.setVisible(true);

                        if (empresas.isEmpty()) {
                            JOptionPane.showMessageDialog(null,
                                    "Não existe cadastro de nome \"" + nome + "\"");
                            jTable2.setVisible(false);
                            limpatable();
                        } else {
                            jTable2.setModel(new newTabbleModelCNPJ(new String[]{
                                "Codigo", "Nome", "CNPJ", "Data de Cadastro"
                            }, 1));
                            limpatable();
                            addTable(0, empresas.get(0));
                        }

                        //addToTable(retorno);
                        break;
                    } catch (SQLException ex) {
                        Logger.getLogger(cadastroAreaPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } catch (NullPointerException e) {
                break;
            }
        }
    }

    private void consultarActionPerformed(java.awt.event.ActionEvent evt) {
        buttonNome.setVisible(true);
        buttonData.setVisible(true);
        buttonCNPJ.setVisible(true);
    }

    private void dataActionPerformed(java.awt.event.ActionEvent evt) throws ParseException {
//        area[] lalala = teste.findAreaByData("2018-04-01", "2018-04-10");
        while (true) {
            empresas.clear();
            MaskFormatter formaterData = new MaskFormatter("##/##/####");
            MaskFormatter formaterData2 = new MaskFormatter("##/##/####");
            JFormattedTextField dataInicial = new JFormattedTextField(formaterData);
            JFormattedTextField dataFinal = new JFormattedTextField(formaterData2);
            Object[] message = {
                "Data Inicial:", dataInicial,
                "Data Final:", dataFinal
            };
            int option = JOptionPane.showConfirmDialog(null, message, "Informe a data inicial e final para pesquisa", JOptionPane.OK_CANCEL_OPTION);
            if (option == JOptionPane.CANCEL_OPTION) {
                break;
            } else if (dataFinal.getText().equals("") || dataInicial.getText().equals("")) {
                JOptionPane.showMessageDialog(null,
                        "Favor informar datas válidas no padrão dd/mm/yyyy.");
                continue;
            }
            if (option == JOptionPane.OK_OPTION) {
                Component teste = SwingUtilities.getWindowAncestor(buttonCadastro);
                mainFrame a = (mainFrame) teste;
                String dataInicialQuery = dataInicial.getText().substring(6, 10) + "-" + dataInicial.getText().substring(3, 5) + "-" + dataInicial.getText().substring(0, 2);
                String dataFinalQuery = dataFinal.getText().substring(6, 10) + "-" + dataFinal.getText().substring(3, 5) + "-" + dataFinal.getText().substring(0, 2);
                try {
                    empresas = a.consultaEmpresa(dataInicialQuery, dataFinalQuery);
                } catch (SQLException ex) {
                    Logger.getLogger(cadastroAreaPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
            }
            jScrollPane2.setVisible(true);
            jTable2.setVisible(true);
            jButton3.setVisible(true);
            buttonExportar.setVisible(true);

            jTable2.setModel(new newTabbleModelCNPJ(new String[]{
                "Codigo", "Nome", "CNPJ", "Data de Cadastro"
            }, empresas.size()));
            limpatable();
            for (int i = 0; i <= empresas.size() - 1; i++) {
                if (empresas.get(i) != null) {
                    addTable(i, empresas.get(i));
                } else {
                    break;
                }
            }
            break;
        }

    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) throws ParseException {
        Component teste = SwingUtilities.getWindowAncestor(buttonCadastro);
        mainFrame a = (mainFrame) teste;
        a.switchPanels(1);
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) throws ParseException {
        // ATUALIZAR DADOS
        //int linhaASerAtualizada = 9999999;
        Component teste = SwingUtilities.getWindowAncestor(buttonCadastro);
        mainFrame a = (mainFrame) teste;
        String dado;
        for (int i = 0; i < jTable2.getRowCount(); i++) {
            if (empresas.get(i) == null) {
                break;
            }
            for (int j = 0; j <= 2; j++) {
                switch (j) {
                    case 0:
                        dado = String.valueOf(empresas.get(i).getID());
                        break;
                    case 1:
                        dado = String.valueOf(empresas.get(i).getNome());
                        break;
                    case 2:
                        dado = String.valueOf(empresas.get(i).getCodigoCNPJ());
                        break;
                    default:
                        dado = String.valueOf(empresas.get(i).getData());
                        break;
                }
                if (!dado.equals(String.valueOf(jTable2.getValueAt(i, j)))) {
                    try {
                        switch (j) {
                            case 0:
                                empresas.get(i).setID((String) jTable2.getValueAt(i, j));
                                break;
                            case 1:
                                empresas.get(i).setNome(String.valueOf(jTable2.getValueAt(i, j)));
                                break;
                            case 2:
                                empresas.get(i).setCodigoCNPJ(String.valueOf(jTable2.getValueAt(i, j)));
                                break;
                            default:
                                String dataString = (String) jTable2.getValueAt(i, j);
                                DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd");
                                java.sql.Date data = new java.sql.Date(fmt.parse(dataString).getTime());
                                empresas.get(i).setData(data);
                                break;
                        }
                        a.atualizaEmpresa(empresas.get(i).getID(), empresas.get(i));
                    } catch (SQLException ex) {
                        Logger.getLogger(cadastroAreaPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }

    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        int pixel;
        for (pixel = 0; pixel <= getHeight(); pixel += 10) {
            g.drawLine(0, pixel, pixel, getHeight());
        }
        for (pixel = getHeight(); pixel >= 0; pixel -= 10) {
            g.drawLine(0, pixel, getHeight() - pixel, 0);
        }
        for (pixel = 0; pixel <= getHeight(); pixel += 10) {
            g.drawLine(getWidth(), pixel, getWidth() - pixel, getHeight());
        }
        for (pixel = getHeight(); pixel >= 0; pixel -= 10) {
            g.drawLine(getWidth(), pixel, getWidth() - (getHeight() - pixel), 0);
        }
    }

//"Codigo", "Nome", "CNPJ", "Data de Cadastro"
    private void addTable(int indice, empresa conteudo) {
        jTable2.setValueAt(conteudo.getID(), indice, 0);
        jTable2.setValueAt(conteudo.getNome(), indice, 1);
        jTable2.setValueAt(conteudo.getCodigoCNPJ(), indice, 2);
        jTable2.setValueAt(conteudo.getData(), indice, 3);
    }

    private void limpatable() {
        if (jTable2.isVisible()) {
            for (int i = 0; i < jTable2.getRowCount(); i++) {
                jTable2.setValueAt("", i, 0);
                jTable2.setValueAt("", i, 1);
                jTable2.setValueAt("", i, 2);
                jTable2.setValueAt("", i, 3);
            }
        }
    }

    private void buttonCNPJActionPerformed(ActionEvent evt) throws ParseException {
        MaskFormatter formaterData = new MaskFormatter("##.###.###/####-##");
        JFormattedTextField cnpj = new JFormattedTextField(formaterData);
        String codigoCNPJ;
        Object[] message = {
            "CNPJ:", cnpj
        };
        empresas.clear();
        while (true) {
            try {
                int option = JOptionPane.showConfirmDialog(null, message, "Informe o CNPJ para pesquisa", JOptionPane.OK_CANCEL_OPTION);
                if (cnpj.getText().equals("null") || cnpj.getText().equals("  .   .   /    -  ")) {
                    JOptionPane.showMessageDialog(null,
                            "Favor informar um nome.");
                } else {
                    Component teste = SwingUtilities.getWindowAncestor(buttonCadastro);
                    mainFrame a = (mainFrame) teste;
                    try {
                        empresa retorno = a.consultaEmpresaCNPJ(cnpj.getText());
                        if (retorno != null) {
                            empresas.add(a.consultaEmpresaCNPJ(cnpj.getText()));
                        }
                        jScrollPane2.setVisible(true);
                        jTable2.setVisible(true);
                        jButton3.setVisible(true);
                        buttonExportar.setVisible(true);

                        if (empresas.isEmpty()) {
                            JOptionPane.showMessageDialog(null,
                                    "Não existe cadastro de nome \"" + cnpj.getText() + "\"");
                            jTable2.setVisible(false);
                            limpatable();
                        } else {
                            jTable2.setModel(new newTabbleModelCNPJ(new String[]{
                                "Codigo", "Nome", "CNPJ", "Data de Cadastro"
                            }, 1));
                            limpatable();
                            addTable(0, empresas.get(0));
                        }

                        //addToTable(retorno);
                        break;
                    } catch (SQLException ex) {
                        Logger.getLogger(cadastroAreaPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } catch (NullPointerException e) {
                break;
            }
        }
    }
}
